#! /usr/bin/python
## vi: fileencoding=utf-8 sw=2
#
# Copyright (c) 2010 Adeodato Sim√≥ (dato@net.com.org.es)
# Licensed under the terms of the MIT license.

"""Do various things to an iPod.

Usage:

  % ipod [OPTIONS] <ACTION>

Where action is one of:

  scrobble: send tracks to Last.fm using the "lastfmsubmitd" software.

  sort_albums: set the "sort_album" property of each track to "$YEAR $ALBUM", so
    that an artist's albums are always sorted by date and not by name.
"""

# TODO(dato): scrobble immediately rather than using lastfmsubmitd.

# TODO(dato): do something to scrobble tracks with recent_playcount > 1; the
# problem is that only the timestamp of the last play is stored in the DB, so
# one has to "invent" sensible timestamps for previous plays.

import datetime
import logging
import operator
import sys
import time

import gflags
import gpod
import lastfm.client

FLAGS = gflags.FLAGS

gflags.DEFINE_boolean('silent', False, 'do not emit any warnings, only errors.')

gflags.DEFINE_string('ipod_dir', '/mnt/ipod',
                     'iPod directory (which must be mounted).')

gflags.DEFINE_integer('time_skew', 0,
                      'number of seconds the iPod timestamps are ahead.')

gflags.DEFINE_boolean('sync_after_scrobble', False,
                      'write the iTunes DB after scrobbling tracks, so that '
                      'recent playcounts will be reset to 0 (this will be '
                      'made in a way compatible with gtkpod).')


class Error(Exception):
  """Base exception for this module."""


class UnknownAction(Error):

  def __init__(self, action):
    Error.__init__(self, 'unknown action %r' % (action,))


class CouldNotGetIpodDatabase(Error):

  def __init__(self, mount_point):
    Error.__init__(self, 'could not find iPod DB at %r' % (mount_point,))


def get_ipod_db():
  try:
    return gpod.Database(FLAGS.ipod_dir)
  except gpod.DatabaseException:
    raise CouldNotGetIpodDatabase(FLAGS.ipod_dir)


def get_lastfm_dict(track):
  """Get a dictionary suitable for submission with lastfmsubmitd."""
  if not track['title'] or not track['artist']:
    return None

  # This is horrific, because gpod.Track uses datetime.fromtimestamp() instead
  # of utctimestamp(), sigh. Let's hope they don't change it and break backwards
  # compatibility, and that FLAGS.time_skew does not ever make us cross a DST
  # boundary.
  stamp = int(time.mktime(track['time_played'].timetuple()))
  utc_time = time.gmtime(stamp - FLAGS.time_skew)

  d = {}
  d['time'] = utc_time
  d['title'] = track['title']
  d['artist'] = track['artist']
  d['length'] = int(track['tracklen'] / 1000)  # tracklen is in milliseconds.

  if track['album']:
    d['album'] = track['album']

  return d


def do_scrobble():
  db = get_ipod_db()

  recent_tracks = sorted([track for track in db
                          if track['recent_playcount'] > 0],
                         key=operator.itemgetter('time_played'))

  # TODO(dato): we're assuming recent_playcount == 1 for every track.
  scrobble_tracks = filter(None, map(get_lastfm_dict, recent_tracks))

  playcount_gt_1 = [track for track in recent_tracks
                    if track['recent_playcount'] > 1]

  if playcount_gt_1:
    fmt_gt_1 = [ '  * %(artist)s - %(title)s' % t for t in playcount_gt_1]
    logging.warn('\n'.join(['these tracks have a recent playcount >> 1, but '
                            'will be scrobbled only once:'] + fmt_gt_1))

  if scrobble_tracks:
    client = lastfm.client.Client('ipod-scrobble')
    client.submit_many(scrobble_tracks)
    if FLAGS.sync_after_scrobble:
      db.close()  # Reset "recent_playcount".


def do_sort_albums():
  db = get_ipod_db()

  for track in db:
    if track['album'] and track['year']:
      track['sort_album'] = '%d %s' % (track['year'], track['album'])

  db.close()


def main(argv):
  argv = FLAGS(argv)

  logging_level = logging.INFO if not FLAGS.silent else logging.ERROR
  logging.basicConfig(level=logging_level,
                      format='%(levelname)s: %(message)s', stream=sys.stdout)

  if len(argv) != 2:
    raise Error('need exactly one argument, the action to perform')
  else:
    action = argv[1]

  if action == 'scrobble':
    do_scrobble()
  elif action == 'sort_albums':
    do_sort_albums()
  else:
    raise UnknownAction(action)


if __name__ == '__main__':
  try:
    main(sys.argv)
  except Error, e:
    print >>sys.stderr, 'E: %s.' % (e,)
    sys.exit(1)
